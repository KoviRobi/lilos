# `lilos`: A minimal async RTOS

This is a wee RTOS written to support the `async` style of programming in Rust.
It fits in about 2.5 kiB of Flash, uses about 20 bytes of RAM (before your tasks
are added), and provides a full async runtime with multiple tasks, support for
complex concurrency via `join` and `select`, etc. See the `examples` directory
for some worked examples of varying complexity.

## Repo layout

This repo contains crates in subdirectories, but it is _not_ a Cargo workspace.
This means you will need to `cd` into subdirectories to build things. Here is a
map:

- `os` contains the operating system crate. The [README in that
  crate](https://github.com/cbiffle/lilos/blob/main/os/README.mkdn) gives more
  background.
- `testsuite` contains a test suite for the operating system, which can run on a
  Cortex-M3 or better. See [its
  README](https://github.com/cbiffle/lilos/blob/main/testsuite/README.mkdn) for
  instructions.
- `examples` contains example programs for various microcontrollers.

## Building

You will need a Rust toolchain installed through `rustup`, because we use a
`rustup`-style `rust-toolchain.toml` file to pin the toolchain version to ensure
that you get the right results. Fortunately, if you're using `rustup`, it will
automatically ensure you've got the appropriate toolchain version available,
including support for the right target architecture.

1. Enter the directory you're interested in, for example, `cd os`.
2. Build: `cargo build` (or, for smaller binaries, `cargo build --release`).
3. To try an example on a microcontroller eval board, see the README in the
   individual example. (In most cases `cargo run` in the directory will
   suffice.)

To build everything in the repo, run `./build-all.sh`.

## Contact and License

If you have questions, or you use it for something, I'd love to find out! Send
me an email.

All the code in this repo is MPL-2 licensed.
